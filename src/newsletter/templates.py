"""
Newsletter Templates for InsightWeaver
HTML and text templates for intelligent briefings
"""

from datetime import datetime
from typing import Dict, List, Any

class NewsletterTemplate:
    """Base newsletter template class"""

    @staticmethod
    def format_date(date_obj: datetime) -> str:
        """Format date for newsletter headers"""
        return date_obj.strftime("%B %d, %Y")

    @staticmethod
    def format_time_range(start_date: datetime, end_date: datetime) -> str:
        """Format time range for analysis periods"""
        if start_date.date() == end_date.date():
            return start_date.strftime("%B %d, %Y")
        return f"{start_date.strftime('%B %d')} - {end_date.strftime('%B %d, %Y')}"

class DailyBriefTemplate(NewsletterTemplate):
    """Daily Intelligence Brief Template"""

    @staticmethod
    def generate_html(data: Dict[str, Any]) -> str:
        """Generate HTML version of daily brief"""
        html = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>InsightWeaver Daily Brief - {NewsletterTemplate.format_date(data['date'])}</title>
    <style>
        body {{ font-family: 'Georgia', serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 20px; }}
        .header {{ background: #2c3e50; color: white; padding: 20px; text-align: center; margin-bottom: 30px; }}
        .header h1 {{ margin: 0; font-size: 28px; }}
        .header .subtitle {{ font-size: 14px; margin-top: 5px; opacity: 0.8; }}
        .executive-summary {{ background: #f8f9fa; border-left: 4px solid #3498db; padding: 20px; margin-bottom: 30px; }}
        .executive-summary h2 {{ margin-top: 0; color: #2c3e50; }}
        .executive-summary p {{ font-size: 16px; line-height: 1.7; }}
        .section {{ margin-bottom: 25px; }}
        .section h3 {{ color: #2c3e50; border-bottom: 2px solid #ecf0f1; padding-bottom: 5px; }}
        .priority-item {{ background: #fff; border: 1px solid #e1e8ed; padding: 15px; margin-bottom: 15px; border-radius: 5px; }}
        .priority-score {{ float: right; background: #3498db; color: white; padding: 2px 8px; border-radius: 3px; font-size: 12px; }}
        .article-title {{ font-weight: bold; color: #2c3e50; margin-bottom: 5px; }}
        .article-source {{ color: #7f8c8d; font-size: 12px; }}
        .article-summary {{ margin-top: 8px; font-size: 14px; }}
        .trend-item {{ margin-bottom: 10px; padding: 10px; background: #f8f9fa; border-radius: 3px; }}
        .trend-direction {{ font-weight: bold; }}
        .trend-direction.up {{ color: #27ae60; }}
        .trend-direction.down {{ color: #e74c3c; }}
        .trend-direction.stable {{ color: #f39c12; }}
        .footer {{ text-align: center; color: #7f8c8d; font-size: 12px; margin-top: 40px; padding-top: 20px; border-top: 1px solid #ecf0f1; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>InsightWeaver Daily Brief</h1>
        <div class="subtitle">{NewsletterTemplate.format_date(data['date'])} | Northern Virginia Intelligence</div>
    </div>

    <div class="executive-summary">
        <h2>Executive Summary</h2>
        <p>{data.get('executive_summary', 'Today\'s analysis reveals key developments across government, technology, and regional affairs...')}</p>
    </div>

    <div class="section">
        <h3>Priority Intelligence ({len(data.get('priority_articles', []))} items)</h3>
        {DailyBriefTemplate._render_priority_articles(data.get('priority_articles', []))}
    </div>

    <div class="section">
        <h3>Trend Indicators</h3>
        {DailyBriefTemplate._render_trends(data.get('trends', []))}
    </div>

    <div class="section">
        <h3>Regional Focus</h3>
        {DailyBriefTemplate._render_regional_focus(data.get('regional_articles', []))}
    </div>

    <div class="footer">
        Generated by InsightWeaver | {data.get('article_count', 0)} sources analyzed |
        Processing time: {data.get('processing_time', 'N/A')}
    </div>
</body>
</html>
        """
        return html.strip()

    @staticmethod
    def _render_priority_articles(articles: List[Dict]) -> str:
        """Render priority articles section"""
        if not articles:
            return "<p>No priority articles identified for this period.</p>"

        html_items = []
        for article in articles[:10]:  # Top 10 priority items
            score_class = "priority-score"
            html_items.append(f"""
            <div class="priority-item">
                <div class="priority-score">{article.get('priority_score', 0):.2f}</div>
                <div class="article-title">{article.get('title', 'Untitled')}</div>
                <div class="article-source">{article.get('source', 'Unknown')} | {article.get('category', 'General')}</div>
                <div class="article-summary">{article.get('ai_summary', article.get('summary', 'No summary available'))[:200]}...</div>
            </div>
            """)

        return "".join(html_items)

    @staticmethod
    def _render_trends(trends: List[Dict]) -> str:
        """Render trends section"""
        if not trends:
            return "<p>No significant trends detected in this period.</p>"

        html_items = []
        for trend in trends[:8]:  # Top 8 trends
            direction = trend.get('direction', 'stable').lower()
            direction_class = f"trend-direction {direction}"
            direction_symbol = "↑" if direction == "up" else "↓" if direction == "down" else "→"

            html_items.append(f"""
            <div class="trend-item">
                <span class="{direction_class}">{direction_symbol} {trend.get('name', 'Unknown Trend')}</span>
                ({trend.get('article_count', 0)} articles, {trend.get('confidence', 0):.0f}% confidence)
                <br><small>{trend.get('description', 'No description available')[:150]}...</small>
            </div>
            """)

        return "".join(html_items)

    @staticmethod
    def _render_regional_focus(articles: List[Dict]) -> str:
        """Render regional focus section"""
        if not articles:
            return "<p>No significant regional developments identified.</p>"

        html_items = []
        for article in articles[:5]:  # Top 5 regional items
            html_items.append(f"""
            <div class="priority-item">
                <div class="article-title">{article.get('title', 'Untitled')}</div>
                <div class="article-source">{article.get('source', 'Unknown')} | Regional Impact</div>
                <div class="article-summary">{article.get('ai_summary', article.get('summary', 'No summary available'))[:150]}...</div>
            </div>
            """)

        return "".join(html_items)

class WeeklyTrendTemplate(NewsletterTemplate):
    """Weekly Trend Analysis Template"""

    @staticmethod
    def generate_html(data: Dict[str, Any]) -> str:
        """Generate HTML version of weekly trend report"""
        html = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>InsightWeaver Weekly Trends - {NewsletterTemplate.format_time_range(data['start_date'], data['end_date'])}</title>
    <style>
        body {{ font-family: 'Georgia', serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 20px; }}
        .header {{ background: #8e44ad; color: white; padding: 20px; text-align: center; margin-bottom: 30px; }}
        .header h1 {{ margin: 0; font-size: 28px; }}
        .header .subtitle {{ font-size: 14px; margin-top: 5px; opacity: 0.8; }}
        .executive-summary {{ background: #f8f9fa; border-left: 4px solid #8e44ad; padding: 20px; margin-bottom: 30px; }}
        .executive-summary h2 {{ margin-top: 0; color: #2c3e50; }}
        .executive-summary p {{ font-size: 16px; line-height: 1.7; }}
        .section {{ margin-bottom: 25px; }}
        .section h3 {{ color: #2c3e50; border-bottom: 2px solid #ecf0f1; padding-bottom: 5px; }}
        .trend-analysis {{ background: #fff; border: 1px solid #e1e8ed; padding: 20px; margin-bottom: 20px; border-radius: 5px; }}
        .trend-name {{ font-size: 18px; font-weight: bold; color: #2c3e50; margin-bottom: 10px; }}
        .trend-momentum {{ float: right; padding: 5px 10px; border-radius: 3px; font-size: 12px; font-weight: bold; }}
        .trend-momentum.strong-up {{ background: #27ae60; color: white; }}
        .trend-momentum.moderate-up {{ background: #2ecc71; color: white; }}
        .trend-momentum.stable {{ background: #f39c12; color: white; }}
        .trend-momentum.moderate-down {{ background: #e67e22; color: white; }}
        .trend-momentum.strong-down {{ background: #e74c3c; color: white; }}
        .trend-evidence {{ margin-top: 15px; }}
        .evidence-item {{ margin-bottom: 8px; font-size: 14px; }}
        .prediction-box {{ background: #3498db; color: white; padding: 20px; border-radius: 5px; margin: 20px 0; }}
        .prediction-box h4 {{ margin: 0 0 10px 0; }}
        .footer {{ text-align: center; color: #7f8c8d; font-size: 12px; margin-top: 40px; padding-top: 20px; border-top: 1px solid #ecf0f1; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>InsightWeaver Weekly Trends</h1>
        <div class="subtitle">{NewsletterTemplate.format_time_range(data['start_date'], data['end_date'])} | Strategic Intelligence Analysis</div>
    </div>

    <div class="executive-summary">
        <h2>Weekly Intelligence Summary</h2>
        <p>{data.get('executive_summary', 'This week\'s analysis reveals significant developments across multiple domains...')}</p>
    </div>

    <div class="section">
        <h3>Trend Analysis ({len(data.get('trends', []))} trends tracked)</h3>
        {WeeklyTrendTemplate._render_trend_analyses(data.get('trends', []))}
    </div>

    <div class="prediction-box">
        <h4>Forward Indicators</h4>
        <p>{data.get('predictions', 'Based on current trend momentum, key developments to monitor include emerging patterns in technology policy, regional economic indicators, and geopolitical shifts affecting the Northern Virginia corridor.')}</p>
    </div>

    <div class="footer">
        Generated by InsightWeaver | {data.get('total_articles', 0)} articles analyzed |
        Analysis period: {NewsletterTemplate.format_time_range(data['start_date'], data['end_date'])}
    </div>
</body>
</html>
        """
        return html.strip()

    @staticmethod
    def _render_trend_analyses(trends: List[Dict]) -> str:
        """Render detailed trend analyses"""
        if not trends:
            return "<p>No significant trends identified for this period.</p>"

        html_items = []
        for trend in trends:
            momentum = trend.get('momentum', 'stable')
            momentum_class = f"trend-momentum {momentum.replace('_', '-')}"
            momentum_label = momentum.replace('_', ' ').title()

            html_items.append(f"""
            <div class="trend-analysis">
                <div class="trend-momentum {momentum_class}">{momentum_label}</div>
                <div class="trend-name">{trend.get('name', 'Unknown Trend')}</div>
                <p>{trend.get('description', 'No description available')}</p>
                <div class="trend-evidence">
                    <strong>Evidence ({trend.get('article_count', 0)} articles):</strong>
                    {WeeklyTrendTemplate._render_evidence(trend.get('evidence', {}))}
                </div>
            </div>
            """)

        return "".join(html_items)

    @staticmethod
    def _render_evidence(evidence: Dict) -> str:
        """Render trend evidence"""
        supporting = evidence.get('supporting', [])
        opposing = evidence.get('opposing', [])

        html_parts = []

        if supporting:
            html_parts.append(f"<div class='evidence-item'><strong>Supporting:</strong> {len(supporting)} articles indicating trend acceleration</div>")

        if opposing:
            html_parts.append(f"<div class='evidence-item'><strong>Opposing:</strong> {len(opposing)} articles indicating trend deceleration</div>")

        if not html_parts:
            html_parts.append("<div class='evidence-item'>No clear evidence pattern detected</div>")

        return "".join(html_parts)

class TextTemplate:
    """Plain text template for email compatibility"""

    @staticmethod
    def generate_daily_text(data: Dict[str, Any]) -> str:
        """Generate plain text daily brief"""
        text = f"""
INSIGHTWEAVER DAILY BRIEF
{NewsletterTemplate.format_date(data['date'])}
Northern Virginia Intelligence
{'='*50}

EXECUTIVE SUMMARY
{data.get('executive_summary', 'Today\'s analysis reveals key developments across government, technology, and regional affairs...')}

PRIORITY INTELLIGENCE ({len(data.get('priority_articles', []))} items)
{TextTemplate._render_priority_text(data.get('priority_articles', []))}

TREND INDICATORS
{TextTemplate._render_trends_text(data.get('trends', []))}

REGIONAL FOCUS
{TextTemplate._render_regional_text(data.get('regional_articles', []))}

{'='*50}
Generated by InsightWeaver | {data.get('article_count', 0)} sources analyzed
Processing time: {data.get('processing_time', 'N/A')}
        """
        return text.strip()

    @staticmethod
    def _render_priority_text(articles: List[Dict]) -> str:
        """Render priority articles in text format"""
        if not articles:
            return "• No priority articles identified for this period."

        text_items = []
        for i, article in enumerate(articles[:10], 1):
            score = article.get('priority_score', 0)
            title = article.get('title', 'Untitled')
            source = article.get('source', 'Unknown')
            category = article.get('category', 'General')
            summary = article.get('ai_summary', article.get('summary', 'No summary available'))

            text_items.append(f"""
{i}. [{score:.2f}] {title}
   Source: {source} | Category: {category}
   {summary[:150]}...
            """)

        return "".join(text_items)

    @staticmethod
    def _render_trends_text(trends: List[Dict]) -> str:
        """Render trends in text format"""
        if not trends:
            return "• No significant trends detected in this period."

        text_items = []
        for trend in trends[:8]:
            direction = trend.get('direction', 'stable').lower()
            symbol = "↑" if direction == "up" else "↓" if direction == "down" else "→"
            name = trend.get('name', 'Unknown Trend')
            count = trend.get('article_count', 0)
            confidence = trend.get('confidence', 0)

            text_items.append(f"• {symbol} {name} ({count} articles, {confidence:.0f}% confidence)")

        return "\n".join(text_items)

    @staticmethod
    def _render_regional_text(articles: List[Dict]) -> str:
        """Render regional focus in text format"""
        if not articles:
            return "• No significant regional developments identified."

        text_items = []
        for i, article in enumerate(articles[:5], 1):
            title = article.get('title', 'Untitled')
            source = article.get('source', 'Unknown')
            summary = article.get('ai_summary', article.get('summary', 'No summary available'))

            text_items.append(f"""
{i}. {title}
   Source: {source} | Regional Impact
   {summary[:120]}...
            """)

        return "".join(text_items)